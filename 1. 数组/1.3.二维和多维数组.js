/* 1.3.1.矩阵 */

// js 并不支持矩阵，但是我们可以用多维数组来模拟一个矩阵

/*
     ---------------------------------
    | 0  | 125 | 55 | 333 | 458 | 855 |
     ---------------------------------
    | 1  | 554 | 47 | 587 | 236 | 879 |
     ---------------------------------
*/
let temp = []
temp[0] = []
temp[0][0] = 125
temp[0][1] = 55
temp[0][2] = 333
temp[0][3] = 458
temp[0][4] = 855
temp[1] = []
temp[1][0] = 554
temp[1][1] = 47
temp[1][2] = 587
temp[1][3] = 236
temp[1][4] = 879
// [ [ 125, 55, 333, 458, 855 ], [ 554, 47, 587, 236, 879 ] ]

// 如果我们希望计算出以上矩阵纵向数据的和加入到第三行我们可以这样来编写程序
temp[2] = []
for (let i = 0; i < temp.length; i++) {
    for (let j = 0; j < temp[i].length; j ++) {
        if (i < temp.length - 1) {
            if (i >= 1) {
                temp[2][j] = temp[i][j] + temp[i - 1][j]
            }
        }
    }
}
/* 
运算结果如下：
[
  [ 125, 55, 333, 458, 855 ],
  [ 554, 47, 587, 236, 879 ],
  [ 679, 102, 920, 694, 1734 ]
]
*/


/* 1.3.2.三维数组 */

// 三维数组包含3个维度 X,Y,Z 即 横向，纵向，深度。我们可以这样来定义一个三维数组

let matrix3x3x3 = []
matrix3x3x3[0] = []
matrix3x3x3[1] = []
matrix3x3x3[2] = []
matrix3x3x3[0][0] = [1, 2, 3, 4]
matrix3x3x3[0][1] = [1, 2, 3, 4]
matrix3x3x3[0][2] = [1, 2, 3, 4]
matrix3x3x3[1][0] = [5, 6, 7]
matrix3x3x3[1][1] = [5, 6, 7]
matrix3x3x3[1][2] = [5, 6, 7]
matrix3x3x3[2][0] = [8, 9]
matrix3x3x3[2][1] = [8, 9]
matrix3x3x3[2][2] = [8, 9]
/*
[
  [ [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ] ],
  [ [ 5, 6, 7 ], [ 5, 6, 7 ], [ 5, 6, 7 ] ],
  [ [ 8, 9 ], [ 8, 9 ], [ 8, 9 ] ]
]
*/

// 用代码输出这个三维数组的值
for (let i=0; i<matrix3x3x3.length; i++){
    for (let j=0; j<matrix3x3x3[i].length; j++){
        for (let z=0; z<matrix3x3x3[i][j].length; z++){
            console.log(matrix3x3x3[i][j][z]);
        }
    }
} 
// 1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,5,6,7,5,6,7,8,9,8,9,8,9

// 总结： 不管是多少维的数组，我都可以用多重循环来获取其中某个维度的元素

